/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/popper.js":
/*!********************************!*\
  !*** ./resources/js/popper.js ***!
  \********************************/
/***/ (function(module, exports) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**\r\n * @popperjs/core v2.9.2 - MIT License\r\n */\n\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n!function (e, t) {\n  \"object\" == ( false ? 0 : _typeof(exports)) && \"undefined\" != \"object\" ? t(exports) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports], __WEBPACK_AMD_DEFINE_FACTORY__ = (t),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : 0;\n}(this, function (e) {\n  function t(e) {\n    return {\n      width: (e = e.getBoundingClientRect()).width,\n      height: e.height,\n      top: e.top,\n      right: e.right,\n      bottom: e.bottom,\n      left: e.left,\n      x: e.left,\n      y: e.top\n    };\n  }\n\n  function n(e) {\n    return null == e ? window : \"[object Window]\" !== e.toString() ? (e = e.ownerDocument) && e.defaultView || window : e;\n  }\n\n  function o(e) {\n    return {\n      scrollLeft: (e = n(e)).pageXOffset,\n      scrollTop: e.pageYOffset\n    };\n  }\n\n  function r(e) {\n    return e instanceof n(e).Element || e instanceof Element;\n  }\n\n  function i(e) {\n    return e instanceof n(e).HTMLElement || e instanceof HTMLElement;\n  }\n\n  function a(e) {\n    return \"undefined\" != typeof ShadowRoot && (e instanceof n(e).ShadowRoot || e instanceof ShadowRoot);\n  }\n\n  function s(e) {\n    return e ? (e.nodeName || \"\").toLowerCase() : null;\n  }\n\n  function f(e) {\n    return ((r(e) ? e.ownerDocument : e.document) || window.document).documentElement;\n  }\n\n  function p(e) {\n    return t(f(e)).left + o(e).scrollLeft;\n  }\n\n  function c(e) {\n    return n(e).getComputedStyle(e);\n  }\n\n  function l(e) {\n    return e = c(e), /auto|scroll|overlay|hidden/.test(e.overflow + e.overflowY + e.overflowX);\n  }\n\n  function u(e, r, a) {\n    void 0 === a && (a = !1);\n    var c = f(r);\n    e = t(e);\n    var u = i(r),\n        d = {\n      scrollLeft: 0,\n      scrollTop: 0\n    },\n        m = {\n      x: 0,\n      y: 0\n    };\n    return (u || !u && !a) && ((\"body\" !== s(r) || l(c)) && (d = r !== n(r) && i(r) ? {\n      scrollLeft: r.scrollLeft,\n      scrollTop: r.scrollTop\n    } : o(r)), i(r) ? ((m = t(r)).x += r.clientLeft, m.y += r.clientTop) : c && (m.x = p(c))), {\n      x: e.left + d.scrollLeft - m.x,\n      y: e.top + d.scrollTop - m.y,\n      width: e.width,\n      height: e.height\n    };\n  }\n\n  function d(e) {\n    var n = t(e),\n        o = e.offsetWidth,\n        r = e.offsetHeight;\n    return 1 >= Math.abs(n.width - o) && (o = n.width), 1 >= Math.abs(n.height - r) && (r = n.height), {\n      x: e.offsetLeft,\n      y: e.offsetTop,\n      width: o,\n      height: r\n    };\n  }\n\n  function m(e) {\n    return \"html\" === s(e) ? e : e.assignedSlot || e.parentNode || (a(e) ? e.host : null) || f(e);\n  }\n\n  function h(e) {\n    return 0 <= [\"html\", \"body\", \"#document\"].indexOf(s(e)) ? e.ownerDocument.body : i(e) && l(e) ? e : h(m(e));\n  }\n\n  function v(e, t) {\n    var o;\n    void 0 === t && (t = []);\n    var r = h(e);\n    return e = r === (null == (o = e.ownerDocument) ? void 0 : o.body), o = n(r), r = e ? [o].concat(o.visualViewport || [], l(r) ? r : []) : r, t = t.concat(r), e ? t : t.concat(v(m(r)));\n  }\n\n  function g(e) {\n    return i(e) && \"fixed\" !== c(e).position ? e.offsetParent : null;\n  }\n\n  function y(e) {\n    for (var t = n(e), o = g(e); o && 0 <= [\"table\", \"td\", \"th\"].indexOf(s(o)) && \"static\" === c(o).position;) {\n      o = g(o);\n    }\n\n    if (o && (\"html\" === s(o) || \"body\" === s(o) && \"static\" === c(o).position)) return t;\n    if (!o) e: {\n      if (o = -1 !== navigator.userAgent.toLowerCase().indexOf(\"firefox\"), -1 === navigator.userAgent.indexOf(\"Trident\") || !i(e) || \"fixed\" !== c(e).position) for (e = m(e); i(e) && 0 > [\"html\", \"body\"].indexOf(s(e));) {\n        var r = c(e);\n\n        if (\"none\" !== r.transform || \"none\" !== r.perspective || \"paint\" === r.contain || -1 !== [\"transform\", \"perspective\"].indexOf(r.willChange) || o && \"filter\" === r.willChange || o && r.filter && \"none\" !== r.filter) {\n          o = e;\n          break e;\n        }\n\n        e = e.parentNode;\n      }\n      o = null;\n    }\n    return o || t;\n  }\n\n  function b(e) {\n    function t(e) {\n      o.add(e.name), [].concat(e.requires || [], e.requiresIfExists || []).forEach(function (e) {\n        o.has(e) || (e = n.get(e)) && t(e);\n      }), r.push(e);\n    }\n\n    var n = new Map(),\n        o = new Set(),\n        r = [];\n    return e.forEach(function (e) {\n      n.set(e.name, e);\n    }), e.forEach(function (e) {\n      o.has(e.name) || t(e);\n    }), r;\n  }\n\n  function w(e) {\n    var t;\n    return function () {\n      return t || (t = new Promise(function (n) {\n        Promise.resolve().then(function () {\n          t = void 0, n(e());\n        });\n      })), t;\n    };\n  }\n\n  function x(e) {\n    return e.split(\"-\")[0];\n  }\n\n  function O(e, t) {\n    var n = t.getRootNode && t.getRootNode();\n    if (e.contains(t)) return !0;\n    if (n && a(n)) do {\n      if (t && e.isSameNode(t)) return !0;\n      t = t.parentNode || t.host;\n    } while (t);\n    return !1;\n  }\n\n  function j(e) {\n    return Object.assign({}, e, {\n      left: e.x,\n      top: e.y,\n      right: e.x + e.width,\n      bottom: e.y + e.height\n    });\n  }\n\n  function E(e, r) {\n    if (\"viewport\" === r) {\n      r = n(e);\n      var a = f(e);\n      r = r.visualViewport;\n      var s = a.clientWidth;\n      a = a.clientHeight;\n      var l = 0,\n          u = 0;\n      r && (s = r.width, a = r.height, /^((?!chrome|android).)*safari/i.test(navigator.userAgent) || (l = r.offsetLeft, u = r.offsetTop)), e = j(e = {\n        width: s,\n        height: a,\n        x: l + p(e),\n        y: u\n      });\n    } else i(r) ? ((e = t(r)).top += r.clientTop, e.left += r.clientLeft, e.bottom = e.top + r.clientHeight, e.right = e.left + r.clientWidth, e.width = r.clientWidth, e.height = r.clientHeight, e.x = e.left, e.y = e.top) : (u = f(e), e = f(u), s = o(u), r = null == (a = u.ownerDocument) ? void 0 : a.body, a = _(e.scrollWidth, e.clientWidth, r ? r.scrollWidth : 0, r ? r.clientWidth : 0), l = _(e.scrollHeight, e.clientHeight, r ? r.scrollHeight : 0, r ? r.clientHeight : 0), u = -s.scrollLeft + p(u), s = -s.scrollTop, \"rtl\" === c(r || e).direction && (u += _(e.clientWidth, r ? r.clientWidth : 0) - a), e = j({\n      width: a,\n      height: l,\n      x: u,\n      y: s\n    }));\n\n    return e;\n  }\n\n  function D(e, t, n) {\n    return t = \"clippingParents\" === t ? function (e) {\n      var t = v(m(e)),\n          n = 0 <= [\"absolute\", \"fixed\"].indexOf(c(e).position) && i(e) ? y(e) : e;\n      return r(n) ? t.filter(function (e) {\n        return r(e) && O(e, n) && \"body\" !== s(e);\n      }) : [];\n    }(e) : [].concat(t), (n = (n = [].concat(t, [n])).reduce(function (t, n) {\n      return n = E(e, n), t.top = _(n.top, t.top), t.right = U(n.right, t.right), t.bottom = U(n.bottom, t.bottom), t.left = _(n.left, t.left), t;\n    }, E(e, n[0]))).width = n.right - n.left, n.height = n.bottom - n.top, n.x = n.left, n.y = n.top, n;\n  }\n\n  function L(e) {\n    return 0 <= [\"top\", \"bottom\"].indexOf(e) ? \"x\" : \"y\";\n  }\n\n  function P(e) {\n    var t = e.reference,\n        n = e.element,\n        o = (e = e.placement) ? x(e) : null;\n    e = e ? e.split(\"-\")[1] : null;\n    var r = t.x + t.width / 2 - n.width / 2,\n        i = t.y + t.height / 2 - n.height / 2;\n\n    switch (o) {\n      case \"top\":\n        r = {\n          x: r,\n          y: t.y - n.height\n        };\n        break;\n\n      case \"bottom\":\n        r = {\n          x: r,\n          y: t.y + t.height\n        };\n        break;\n\n      case \"right\":\n        r = {\n          x: t.x + t.width,\n          y: i\n        };\n        break;\n\n      case \"left\":\n        r = {\n          x: t.x - n.width,\n          y: i\n        };\n        break;\n\n      default:\n        r = {\n          x: t.x,\n          y: t.y\n        };\n    }\n\n    if (null != (o = o ? L(o) : null)) switch (i = \"y\" === o ? \"height\" : \"width\", e) {\n      case \"start\":\n        r[o] -= t[i] / 2 - n[i] / 2;\n        break;\n\n      case \"end\":\n        r[o] += t[i] / 2 - n[i] / 2;\n    }\n    return r;\n  }\n\n  function M(e) {\n    return Object.assign({}, {\n      top: 0,\n      right: 0,\n      bottom: 0,\n      left: 0\n    }, e);\n  }\n\n  function k(e, t) {\n    return t.reduce(function (t, n) {\n      return t[n] = e, t;\n    }, {});\n  }\n\n  function A(e, n) {\n    void 0 === n && (n = {});\n    var o = n;\n    n = void 0 === (n = o.placement) ? e.placement : n;\n    var i = o.boundary,\n        a = void 0 === i ? \"clippingParents\" : i,\n        s = void 0 === (i = o.rootBoundary) ? \"viewport\" : i;\n    i = void 0 === (i = o.elementContext) ? \"popper\" : i;\n    var p = o.altBoundary,\n        c = void 0 !== p && p;\n    o = M(\"number\" != typeof (o = void 0 === (o = o.padding) ? 0 : o) ? o : k(o, C));\n    var l = e.elements.reference;\n    p = e.rects.popper, a = D(r(c = e.elements[c ? \"popper\" === i ? \"reference\" : \"popper\" : i]) ? c : c.contextElement || f(e.elements.popper), a, s), c = P({\n      reference: s = t(l),\n      element: p,\n      strategy: \"absolute\",\n      placement: n\n    }), p = j(Object.assign({}, p, c)), s = \"popper\" === i ? p : s;\n    var u = {\n      top: a.top - s.top + o.top,\n      bottom: s.bottom - a.bottom + o.bottom,\n      left: a.left - s.left + o.left,\n      right: s.right - a.right + o.right\n    };\n\n    if (e = e.modifiersData.offset, \"popper\" === i && e) {\n      var d = e[n];\n      Object.keys(u).forEach(function (e) {\n        var t = 0 <= [\"right\", \"bottom\"].indexOf(e) ? 1 : -1,\n            n = 0 <= [\"top\", \"bottom\"].indexOf(e) ? \"y\" : \"x\";\n        u[e] += d[n] * t;\n      });\n    }\n\n    return u;\n  }\n\n  function W() {\n    for (var e = arguments.length, t = Array(e), n = 0; n < e; n++) {\n      t[n] = arguments[n];\n    }\n\n    return !t.some(function (e) {\n      return !(e && \"function\" == typeof e.getBoundingClientRect);\n    });\n  }\n\n  function B(e) {\n    void 0 === e && (e = {});\n    var t = e.defaultModifiers,\n        n = void 0 === t ? [] : t,\n        o = void 0 === (e = e.defaultOptions) ? F : e;\n    return function (e, t, i) {\n      function a() {\n        f.forEach(function (e) {\n          return e();\n        }), f = [];\n      }\n\n      void 0 === i && (i = o);\n      var s = {\n        placement: \"bottom\",\n        orderedModifiers: [],\n        options: Object.assign({}, F, o),\n        modifiersData: {},\n        elements: {\n          reference: e,\n          popper: t\n        },\n        attributes: {},\n        styles: {}\n      },\n          f = [],\n          p = !1,\n          c = {\n        state: s,\n        setOptions: function setOptions(i) {\n          return a(), s.options = Object.assign({}, o, s.options, i), s.scrollParents = {\n            reference: r(e) ? v(e) : e.contextElement ? v(e.contextElement) : [],\n            popper: v(t)\n          }, i = function (e) {\n            var t = b(e);\n            return I.reduce(function (e, n) {\n              return e.concat(t.filter(function (e) {\n                return e.phase === n;\n              }));\n            }, []);\n          }(function (e) {\n            var t = e.reduce(function (e, t) {\n              var n = e[t.name];\n              return e[t.name] = n ? Object.assign({}, n, t, {\n                options: Object.assign({}, n.options, t.options),\n                data: Object.assign({}, n.data, t.data)\n              }) : t, e;\n            }, {});\n            return Object.keys(t).map(function (e) {\n              return t[e];\n            });\n          }([].concat(n, s.options.modifiers))), s.orderedModifiers = i.filter(function (e) {\n            return e.enabled;\n          }), s.orderedModifiers.forEach(function (e) {\n            var t = e.name,\n                n = e.options;\n            n = void 0 === n ? {} : n, \"function\" == typeof (e = e.effect) && (t = e({\n              state: s,\n              name: t,\n              instance: c,\n              options: n\n            }), f.push(t || function () {}));\n          }), c.update();\n        },\n        forceUpdate: function forceUpdate() {\n          if (!p) {\n            var e = s.elements,\n                t = e.reference;\n            if (W(t, e = e.popper)) for (s.rects = {\n              reference: u(t, y(e), \"fixed\" === s.options.strategy),\n              popper: d(e)\n            }, s.reset = !1, s.placement = s.options.placement, s.orderedModifiers.forEach(function (e) {\n              return s.modifiersData[e.name] = Object.assign({}, e.data);\n            }), t = 0; t < s.orderedModifiers.length; t++) {\n              if (!0 === s.reset) s.reset = !1, t = -1;else {\n                var n = s.orderedModifiers[t];\n                e = n.fn;\n                var o = n.options;\n                o = void 0 === o ? {} : o, n = n.name, \"function\" == typeof e && (s = e({\n                  state: s,\n                  options: o,\n                  name: n,\n                  instance: c\n                }) || s);\n              }\n            }\n          }\n        },\n        update: w(function () {\n          return new Promise(function (e) {\n            c.forceUpdate(), e(s);\n          });\n        }),\n        destroy: function destroy() {\n          a(), p = !0;\n        }\n      };\n      return W(e, t) ? (c.setOptions(i).then(function (e) {\n        !p && i.onFirstUpdate && i.onFirstUpdate(e);\n      }), c) : c;\n    };\n  }\n\n  function T(e) {\n    var t,\n        o = e.popper,\n        r = e.popperRect,\n        i = e.placement,\n        a = e.offsets,\n        s = e.position,\n        p = e.gpuAcceleration,\n        l = e.adaptive;\n\n    if (!0 === (e = e.roundOffsets)) {\n      e = a.y;\n      var u = window.devicePixelRatio || 1;\n      e = {\n        x: z(z(a.x * u) / u) || 0,\n        y: z(z(e * u) / u) || 0\n      };\n    } else e = \"function\" == typeof e ? e(a) : a;\n\n    e = void 0 === (e = (u = e).x) ? 0 : e, u = void 0 === (u = u.y) ? 0 : u;\n    var d = a.hasOwnProperty(\"x\");\n    a = a.hasOwnProperty(\"y\");\n    var m,\n        h = \"left\",\n        v = \"top\",\n        g = window;\n\n    if (l) {\n      var b = y(o),\n          w = \"clientHeight\",\n          x = \"clientWidth\";\n      b === n(o) && \"static\" !== c(b = f(o)).position && (w = \"scrollHeight\", x = \"scrollWidth\"), \"top\" === i && (v = \"bottom\", u -= b[w] - r.height, u *= p ? 1 : -1), \"left\" === i && (h = \"right\", e -= b[x] - r.width, e *= p ? 1 : -1);\n    }\n\n    return o = Object.assign({\n      position: s\n    }, l && J), p ? Object.assign({}, o, ((m = {})[v] = a ? \"0\" : \"\", m[h] = d ? \"0\" : \"\", m.transform = 2 > (g.devicePixelRatio || 1) ? \"translate(\" + e + \"px, \" + u + \"px)\" : \"translate3d(\" + e + \"px, \" + u + \"px, 0)\", m)) : Object.assign({}, o, ((t = {})[v] = a ? u + \"px\" : \"\", t[h] = d ? e + \"px\" : \"\", t.transform = \"\", t));\n  }\n\n  function H(e) {\n    return e.replace(/left|right|bottom|top/g, function (e) {\n      return $[e];\n    });\n  }\n\n  function R(e) {\n    return e.replace(/start|end/g, function (e) {\n      return ee[e];\n    });\n  }\n\n  function S(e, t, n) {\n    return void 0 === n && (n = {\n      x: 0,\n      y: 0\n    }), {\n      top: e.top - t.height - n.y,\n      right: e.right - t.width + n.x,\n      bottom: e.bottom - t.height + n.y,\n      left: e.left - t.width - n.x\n    };\n  }\n\n  function q(e) {\n    return [\"top\", \"right\", \"bottom\", \"left\"].some(function (t) {\n      return 0 <= e[t];\n    });\n  }\n\n  var C = [\"top\", \"bottom\", \"right\", \"left\"],\n      N = C.reduce(function (e, t) {\n    return e.concat([t + \"-start\", t + \"-end\"]);\n  }, []),\n      V = [].concat(C, [\"auto\"]).reduce(function (e, t) {\n    return e.concat([t, t + \"-start\", t + \"-end\"]);\n  }, []),\n      I = \"beforeRead read afterRead beforeMain main afterMain beforeWrite write afterWrite\".split(\" \"),\n      _ = Math.max,\n      U = Math.min,\n      z = Math.round,\n      F = {\n    placement: \"bottom\",\n    modifiers: [],\n    strategy: \"absolute\"\n  },\n      X = {\n    passive: !0\n  },\n      Y = {\n    name: \"eventListeners\",\n    enabled: !0,\n    phase: \"write\",\n    fn: function fn() {},\n    effect: function effect(e) {\n      var t = e.state,\n          o = e.instance,\n          r = (e = e.options).scroll,\n          i = void 0 === r || r,\n          a = void 0 === (e = e.resize) || e,\n          s = n(t.elements.popper),\n          f = [].concat(t.scrollParents.reference, t.scrollParents.popper);\n      return i && f.forEach(function (e) {\n        e.addEventListener(\"scroll\", o.update, X);\n      }), a && s.addEventListener(\"resize\", o.update, X), function () {\n        i && f.forEach(function (e) {\n          e.removeEventListener(\"scroll\", o.update, X);\n        }), a && s.removeEventListener(\"resize\", o.update, X);\n      };\n    },\n    data: {}\n  },\n      G = {\n    name: \"popperOffsets\",\n    enabled: !0,\n    phase: \"read\",\n    fn: function fn(e) {\n      var t = e.state;\n      t.modifiersData[e.name] = P({\n        reference: t.rects.reference,\n        element: t.rects.popper,\n        strategy: \"absolute\",\n        placement: t.placement\n      });\n    },\n    data: {}\n  },\n      J = {\n    top: \"auto\",\n    right: \"auto\",\n    bottom: \"auto\",\n    left: \"auto\"\n  },\n      K = {\n    name: \"computeStyles\",\n    enabled: !0,\n    phase: \"beforeWrite\",\n    fn: function fn(e) {\n      var t = e.state,\n          n = e.options;\n      e = void 0 === (e = n.gpuAcceleration) || e;\n      var o = n.adaptive;\n      o = void 0 === o || o, n = void 0 === (n = n.roundOffsets) || n, e = {\n        placement: x(t.placement),\n        popper: t.elements.popper,\n        popperRect: t.rects.popper,\n        gpuAcceleration: e\n      }, null != t.modifiersData.popperOffsets && (t.styles.popper = Object.assign({}, t.styles.popper, T(Object.assign({}, e, {\n        offsets: t.modifiersData.popperOffsets,\n        position: t.options.strategy,\n        adaptive: o,\n        roundOffsets: n\n      })))), null != t.modifiersData.arrow && (t.styles.arrow = Object.assign({}, t.styles.arrow, T(Object.assign({}, e, {\n        offsets: t.modifiersData.arrow,\n        position: \"absolute\",\n        adaptive: !1,\n        roundOffsets: n\n      })))), t.attributes.popper = Object.assign({}, t.attributes.popper, {\n        \"data-popper-placement\": t.placement\n      });\n    },\n    data: {}\n  },\n      Q = {\n    name: \"applyStyles\",\n    enabled: !0,\n    phase: \"write\",\n    fn: function fn(e) {\n      var t = e.state;\n      Object.keys(t.elements).forEach(function (e) {\n        var n = t.styles[e] || {},\n            o = t.attributes[e] || {},\n            r = t.elements[e];\n        i(r) && s(r) && (Object.assign(r.style, n), Object.keys(o).forEach(function (e) {\n          var t = o[e];\n          !1 === t ? r.removeAttribute(e) : r.setAttribute(e, !0 === t ? \"\" : t);\n        }));\n      });\n    },\n    effect: function effect(e) {\n      var t = e.state,\n          n = {\n        popper: {\n          position: t.options.strategy,\n          left: \"0\",\n          top: \"0\",\n          margin: \"0\"\n        },\n        arrow: {\n          position: \"absolute\"\n        },\n        reference: {}\n      };\n      return Object.assign(t.elements.popper.style, n.popper), t.styles = n, t.elements.arrow && Object.assign(t.elements.arrow.style, n.arrow), function () {\n        Object.keys(t.elements).forEach(function (e) {\n          var o = t.elements[e],\n              r = t.attributes[e] || {};\n          e = Object.keys(t.styles.hasOwnProperty(e) ? t.styles[e] : n[e]).reduce(function (e, t) {\n            return e[t] = \"\", e;\n          }, {}), i(o) && s(o) && (Object.assign(o.style, e), Object.keys(r).forEach(function (e) {\n            o.removeAttribute(e);\n          }));\n        });\n      };\n    },\n    requires: [\"computeStyles\"]\n  },\n      Z = {\n    name: \"offset\",\n    enabled: !0,\n    phase: \"main\",\n    requires: [\"popperOffsets\"],\n    fn: function fn(e) {\n      var t = e.state,\n          n = e.name,\n          o = void 0 === (e = e.options.offset) ? [0, 0] : e,\n          r = (e = V.reduce(function (e, n) {\n        var r = t.rects,\n            i = x(n),\n            a = 0 <= [\"left\", \"top\"].indexOf(i) ? -1 : 1,\n            s = \"function\" == typeof o ? o(Object.assign({}, r, {\n          placement: n\n        })) : o;\n        return r = (r = s[0]) || 0, s = ((s = s[1]) || 0) * a, i = 0 <= [\"left\", \"right\"].indexOf(i) ? {\n          x: s,\n          y: r\n        } : {\n          x: r,\n          y: s\n        }, e[n] = i, e;\n      }, {}))[t.placement],\n          i = r.x;\n      r = r.y, null != t.modifiersData.popperOffsets && (t.modifiersData.popperOffsets.x += i, t.modifiersData.popperOffsets.y += r), t.modifiersData[n] = e;\n    }\n  },\n      $ = {\n    left: \"right\",\n    right: \"left\",\n    bottom: \"top\",\n    top: \"bottom\"\n  },\n      ee = {\n    start: \"end\",\n    end: \"start\"\n  },\n      te = {\n    name: \"flip\",\n    enabled: !0,\n    phase: \"main\",\n    fn: function fn(e) {\n      var t = e.state,\n          n = e.options;\n\n      if (e = e.name, !t.modifiersData[e]._skip) {\n        var o = n.mainAxis;\n        o = void 0 === o || o;\n        var r = n.altAxis;\n        r = void 0 === r || r;\n        var i = n.fallbackPlacements,\n            a = n.padding,\n            s = n.boundary,\n            f = n.rootBoundary,\n            p = n.altBoundary,\n            c = n.flipVariations,\n            l = void 0 === c || c,\n            u = n.allowedAutoPlacements;\n        c = x(n = t.options.placement), i = i || (c !== n && l ? function (e) {\n          if (\"auto\" === x(e)) return [];\n          var t = H(e);\n          return [R(e), t, R(t)];\n        }(n) : [H(n)]);\n        var d = [n].concat(i).reduce(function (e, n) {\n          return e.concat(\"auto\" === x(n) ? function (e, t) {\n            void 0 === t && (t = {});\n            var n = t.boundary,\n                o = t.rootBoundary,\n                r = t.padding,\n                i = t.flipVariations,\n                a = t.allowedAutoPlacements,\n                s = void 0 === a ? V : a,\n                f = t.placement.split(\"-\")[1];\n            0 === (i = (t = f ? i ? N : N.filter(function (e) {\n              return e.split(\"-\")[1] === f;\n            }) : C).filter(function (e) {\n              return 0 <= s.indexOf(e);\n            })).length && (i = t);\n            var p = i.reduce(function (t, i) {\n              return t[i] = A(e, {\n                placement: i,\n                boundary: n,\n                rootBoundary: o,\n                padding: r\n              })[x(i)], t;\n            }, {});\n            return Object.keys(p).sort(function (e, t) {\n              return p[e] - p[t];\n            });\n          }(t, {\n            placement: n,\n            boundary: s,\n            rootBoundary: f,\n            padding: a,\n            flipVariations: l,\n            allowedAutoPlacements: u\n          }) : n);\n        }, []);\n        n = t.rects.reference, i = t.rects.popper;\n        var m = new Map();\n        c = !0;\n\n        for (var h = d[0], v = 0; v < d.length; v++) {\n          var g = d[v],\n              y = x(g),\n              b = \"start\" === g.split(\"-\")[1],\n              w = 0 <= [\"top\", \"bottom\"].indexOf(y),\n              O = w ? \"width\" : \"height\",\n              j = A(t, {\n            placement: g,\n            boundary: s,\n            rootBoundary: f,\n            altBoundary: p,\n            padding: a\n          });\n\n          if (b = w ? b ? \"right\" : \"left\" : b ? \"bottom\" : \"top\", n[O] > i[O] && (b = H(b)), O = H(b), w = [], o && w.push(0 >= j[y]), r && w.push(0 >= j[b], 0 >= j[O]), w.every(function (e) {\n            return e;\n          })) {\n            h = g, c = !1;\n            break;\n          }\n\n          m.set(g, w);\n        }\n\n        if (c) for (o = function o(e) {\n          var t = d.find(function (t) {\n            if (t = m.get(t)) return t.slice(0, e).every(function (e) {\n              return e;\n            });\n          });\n          if (t) return h = t, \"break\";\n        }, r = l ? 3 : 1; 0 < r && \"break\" !== o(r); r--) {\n          ;\n        }\n        t.placement !== h && (t.modifiersData[e]._skip = !0, t.placement = h, t.reset = !0);\n      }\n    },\n    requiresIfExists: [\"offset\"],\n    data: {\n      _skip: !1\n    }\n  },\n      ne = {\n    name: \"preventOverflow\",\n    enabled: !0,\n    phase: \"main\",\n    fn: function fn(e) {\n      var t = e.state,\n          n = e.options;\n      e = e.name;\n      var o = n.mainAxis,\n          r = void 0 === o || o,\n          i = void 0 !== (o = n.altAxis) && o;\n      o = void 0 === (o = n.tether) || o;\n      var a = n.tetherOffset,\n          s = void 0 === a ? 0 : a,\n          f = A(t, {\n        boundary: n.boundary,\n        rootBoundary: n.rootBoundary,\n        padding: n.padding,\n        altBoundary: n.altBoundary\n      });\n      n = x(t.placement);\n      var p = t.placement.split(\"-\")[1],\n          c = !p,\n          l = L(n);\n      n = \"x\" === l ? \"y\" : \"x\", a = t.modifiersData.popperOffsets;\n      var u = t.rects.reference,\n          m = t.rects.popper,\n          h = \"function\" == typeof s ? s(Object.assign({}, t.rects, {\n        placement: t.placement\n      })) : s;\n\n      if (s = {\n        x: 0,\n        y: 0\n      }, a) {\n        if (r || i) {\n          var v = \"y\" === l ? \"top\" : \"left\",\n              g = \"y\" === l ? \"bottom\" : \"right\",\n              b = \"y\" === l ? \"height\" : \"width\",\n              w = a[l],\n              O = a[l] + f[v],\n              j = a[l] - f[g],\n              E = o ? -m[b] / 2 : 0,\n              D = \"start\" === p ? u[b] : m[b];\n          p = \"start\" === p ? -m[b] : -u[b], m = t.elements.arrow, m = o && m ? d(m) : {\n            width: 0,\n            height: 0\n          };\n          var P = t.modifiersData[\"arrow#persistent\"] ? t.modifiersData[\"arrow#persistent\"].padding : {\n            top: 0,\n            right: 0,\n            bottom: 0,\n            left: 0\n          };\n          v = P[v], g = P[g], m = _(0, U(u[b], m[b])), D = c ? u[b] / 2 - E - m - v - h : D - m - v - h, u = c ? -u[b] / 2 + E + m + g + h : p + m + g + h, c = t.elements.arrow && y(t.elements.arrow), h = t.modifiersData.offset ? t.modifiersData.offset[t.placement][l] : 0, c = a[l] + D - h - (c ? \"y\" === l ? c.clientTop || 0 : c.clientLeft || 0 : 0), u = a[l] + u - h, r && (r = o ? U(O, c) : O, j = o ? _(j, u) : j, r = _(r, U(w, j)), a[l] = r, s[l] = r - w), i && (r = (i = a[n]) + f[\"x\" === l ? \"top\" : \"left\"], f = i - f[\"x\" === l ? \"bottom\" : \"right\"], r = o ? U(r, c) : r, o = o ? _(f, u) : f, o = _(r, U(i, o)), a[n] = o, s[n] = o - i);\n        }\n\n        t.modifiersData[e] = s;\n      }\n    },\n    requiresIfExists: [\"offset\"]\n  },\n      oe = {\n    name: \"arrow\",\n    enabled: !0,\n    phase: \"main\",\n    fn: function fn(e) {\n      var t,\n          n = e.state,\n          o = e.name,\n          r = e.options,\n          i = n.elements.arrow,\n          a = n.modifiersData.popperOffsets,\n          s = x(n.placement);\n\n      if (e = L(s), s = 0 <= [\"left\", \"right\"].indexOf(s) ? \"height\" : \"width\", i && a) {\n        r = M(\"number\" != typeof (r = \"function\" == typeof (r = r.padding) ? r(Object.assign({}, n.rects, {\n          placement: n.placement\n        })) : r) ? r : k(r, C));\n        var f = d(i),\n            p = \"y\" === e ? \"top\" : \"left\",\n            c = \"y\" === e ? \"bottom\" : \"right\",\n            l = n.rects.reference[s] + n.rects.reference[e] - a[e] - n.rects.popper[s];\n        a = a[e] - n.rects.reference[e], a = (i = (i = y(i)) ? \"y\" === e ? i.clientHeight || 0 : i.clientWidth || 0 : 0) / 2 - f[s] / 2 + (l / 2 - a / 2), s = _(r[p], U(a, i - f[s] - r[c])), n.modifiersData[o] = ((t = {})[e] = s, t.centerOffset = s - a, t);\n      }\n    },\n    effect: function effect(e) {\n      var t = e.state;\n\n      if (null != (e = void 0 === (e = e.options.element) ? \"[data-popper-arrow]\" : e)) {\n        if (\"string\" == typeof e && !(e = t.elements.popper.querySelector(e))) return;\n        O(t.elements.popper, e) && (t.elements.arrow = e);\n      }\n    },\n    requires: [\"popperOffsets\"],\n    requiresIfExists: [\"preventOverflow\"]\n  },\n      re = {\n    name: \"hide\",\n    enabled: !0,\n    phase: \"main\",\n    requiresIfExists: [\"preventOverflow\"],\n    fn: function fn(e) {\n      var t = e.state;\n      e = e.name;\n      var n = t.rects.reference,\n          o = t.rects.popper,\n          r = t.modifiersData.preventOverflow,\n          i = A(t, {\n        elementContext: \"reference\"\n      }),\n          a = A(t, {\n        altBoundary: !0\n      });\n      n = S(i, n), o = S(a, o, r), r = q(n), a = q(o), t.modifiersData[e] = {\n        referenceClippingOffsets: n,\n        popperEscapeOffsets: o,\n        isReferenceHidden: r,\n        hasPopperEscaped: a\n      }, t.attributes.popper = Object.assign({}, t.attributes.popper, {\n        \"data-popper-reference-hidden\": r,\n        \"data-popper-escaped\": a\n      });\n    }\n  },\n      ie = B({\n    defaultModifiers: [Y, G, K, Q]\n  }),\n      ae = [Y, G, K, Q, Z, te, ne, oe, re],\n      se = B({\n    defaultModifiers: ae\n  });\n  e.applyStyles = Q, e.arrow = oe, e.computeStyles = K, e.createPopper = se, e.createPopperLite = ie, e.defaultModifiers = ae, e.detectOverflow = A, e.eventListeners = Y, e.flip = te, e.hide = re, e.offset = Z, e.popperGenerator = B, e.popperOffsets = G, e.preventOverflow = ne, Object.defineProperty(e, \"__esModule\", {\n    value: !0\n  });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/popper.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./resources/js/popper.js");
/******/ 	
/******/ })()
;